<div class='page-width'>
  <div class='section-header text-center'>
    <h1>{{ page.title }}</h1>
  </div>

  <div id='custom-search-container' class='search-section'>
    <div class='search-interface'>
      <!-- Custom search box -->
      <div class='search-box-section'>
        <input type='text' id='search-box' placeholder='Search...'>
        <button id='search-button'>Search</button>
      </div>

      <div class='main-section'>
        <!-- Custom facets -->
        <div class='facet-column'>
          <div class='facet' id='source-facet'>
            <h3>Source</h3>
            <ul id='source-values'></ul>
          </div>
          <div class='facet' id='documenttype-facet'>
            <h3>Document Type</h3>
            <ul id='documenttype-values'></ul>
          </div>
          <div class='facet' id='author-facet'>
            <h3>Author</h3>
            <ul id='author-values'></ul>
          </div>
        </div>

        <!-- Custom results area -->
        <div class='results-column'>
          <div id='did-you-mean'></div>
          <div id='results-list'></div>
          <div id='pagination'></div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const organizationId = 'aaxispartnerorggxlmz1i4';
    const accessToken =
      'xx2bbe018a-7e4c-4aa5-ba03-bd654be7d8b5';

    // Initialize search state
    let currentQuery = '';
    let currentPage = 1;
    const resultsPerPage = 10;
    let selectedFacets = {};

    // Function to perform search using REST API
    async function performSearch() {
      const searchUrl = `https://${organizationId}.org.coveo.com/rest/search/v2?organizationId=${organizationId}`;

      // Build facets array based on selected facets
      const facets = [
        {
          filterFacetCount: true,
          injectionDepth: 1000,
          numberOfValues: 8,
          sortCriteria: 'automatic',
          resultsMustMatch: 'atLeastOneValue',
          type: 'specific',
          currentValues: selectedFacets.source || [],
          freezeCurrentValues: false,
          isFieldExpanded: false,
          preventAutoSelect: false,
          facetId: 'source',
          field: 'source',
          tabs: { included: [], excluded: [] },
          activeTab: '',
        },
        {
          filterFacetCount: true,
          injectionDepth: 1000,
          numberOfValues: 8,
          sortCriteria: 'automatic',
          resultsMustMatch: 'atLeastOneValue',
          type: 'specific',
          currentValues: selectedFacets.documenttype || [],
          freezeCurrentValues: false,
          isFieldExpanded: false,
          preventAutoSelect: false,
          facetId: 'documenttype',
          field: 'documenttype',
          tabs: { included: [], excluded: [] },
          activeTab: '',
        },
        {
          filterFacetCount: true,
          injectionDepth: 1000,
          numberOfValues: 8,
          sortCriteria: 'automatic',
          resultsMustMatch: 'atLeastOneValue',
          type: 'specific',
          currentValues: selectedFacets.author || [],
          freezeCurrentValues: false,
          isFieldExpanded: false,
          preventAutoSelect: false,
          facetId: 'author',
          field: 'author',
          tabs: { included: [], excluded: [] },
          activeTab: '',
        },
      ];

      // Build request payload
      const payload = {
        locale: 'en',
        debug: false,
        tab: 'default',
        referrer: window.location.href,
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        fieldsToInclude: [
          'author',
          'language',
          'urihash',
          'objecttype',
          'collection',
          'source',
          'permanentid',
          'date',
          'filetype',
          'parents',
          'ec_price',
          'ec_name',
          'ec_description',
          'ec_brand',
          'ec_category',
          'ec_item_group_id',
          'ec_shortdesc',
          'ec_thumbnails',
          'ec_images',
          'ec_promo_price',
          'ec_in_stock',
          'ec_rating',
          'documenttype',
        ],
        q: currentQuery,
        enableQuerySyntax: false,
        searchHub: 'test-stream',
        sortCriteria: 'relevancy',
        queryCorrection: {
          enabled: true,
          options: {
            automaticallyCorrect: 'whenNoResults',
          },
        },
        enableDidYouMean: true,
        facets: facets,
        numberOfResults: resultsPerPage,
        firstResult: (currentPage - 1) * resultsPerPage,
        facetOptions: {
          freezeFacetOrder: false,
        },
      };

      try {
        const response = await fetch(searchUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${accessToken}`,
          },
          body: JSON.stringify(payload),
        });

        if (!response.ok) {
          throw new Error(`HTTP error ${response.status}`);
        }

        const data = await response.json();
        renderSearchResults(data);
      } catch (error) {
        console.error('Search request failed:', error);
        document.getElementById('results-list').innerHTML = '<p>Search failed. Please try again later.</p>';
      }
    }

    // Function to render search results
    function renderSearchResults(data) {
      // Render facets
      renderFacet(
        'source-values',
        data.facets.find((f) => f.facetId === 'source'),
      );
      renderFacet(
        'documenttype-values',
        data.facets.find((f) => f.facetId === 'documenttype'),
      );
      renderFacet(
        'author-values',
        data.facets.find((f) => f.facetId === 'author'),
      );

      // Render "Did You Mean" suggestions
      const didYouMeanEl = document.getElementById('did-you-mean');
      if (data.queryCorrections && data.queryCorrections.length > 0) {
        didYouMeanEl.innerHTML = `Did you mean: <a href="#" class="correction">${data.queryCorrections[0].correctedQuery}</a>?`;
        didYouMeanEl.querySelector('.correction').addEventListener('click', function (e) {
          e.preventDefault();
          currentQuery = data.queryCorrections[0].correctedQuery;
          document.getElementById('search-box').value = currentQuery;
          performSearch();
        });
      } else {
        didYouMeanEl.innerHTML = '';
      }

      // Render results
      const resultsEl = document.getElementById('results-list');
      if (data.results.length === 0) {
        resultsEl.innerHTML = '<p>No results found.</p>';
        return;
      }

      let resultsHtml = '<ul class="results">';
      data.results.forEach((result) => {
        resultsHtml += `
          <li class="result-item">
            <h3><a href="${result.clickUri}">${result.title || 'Untitled'}</a></h3>
            <p>${result.excerpt || ''}</p>
            <div class="result-meta">
              ${result.raw.source ? `<span>Source: ${result.raw.source}</span>` : ''}
              ${result.raw.author ? `<span>Author: ${result.raw.author}</span>` : ''}
            </div>
          </li>
        `;
      });
      resultsHtml += '</ul>';

      // Add pagination
      const totalPages = Math.ceil(data.totalCount / resultsPerPage);
      if (totalPages > 1) {
        resultsHtml += '<div class="pagination">';
        if (currentPage > 1) {
          resultsHtml += '<a href="#" class="prev-page">Previous</a>';
        }
        for (let i = 1; i <= Math.min(totalPages, 5); i++) {
          resultsHtml += `<a href="#" class="page-number ${i === currentPage ? 'current' : ''}">${i}</a>`;
        }
        if (currentPage < totalPages) {
          resultsHtml += '<a href="#" class="next-page">Next</a>';
        }
        resultsHtml += '</div>';
      }

      resultsEl.innerHTML = resultsHtml;

      // Add pagination event listeners
      if (totalPages > 1) {
        if (currentPage > 1) {
          document.querySelector('.prev-page').addEventListener('click', function (e) {
            e.preventDefault();
            currentPage--;
            performSearch();
          });
        }

        document.querySelectorAll('.page-number').forEach((el) => {
          el.addEventListener('click', function (e) {
            e.preventDefault();
            currentPage = parseInt(this.textContent);
            performSearch();
          });
        });

        if (currentPage < totalPages) {
          document.querySelector('.next-page').addEventListener('click', function (e) {
            e.preventDefault();
            currentPage++;
            performSearch();
          });
        }
      }
    }

    // Function to render facet values
    function renderFacet(elementId, facetData) {
      if (!facetData || !facetData.values) return;

      const facetEl = document.getElementById(elementId);
      let facetHtml = '';

      facetData.values.forEach((value) => {
        const isSelected =
          selectedFacets[facetData.facetId] && selectedFacets[facetData.facetId].some((v) => v.value === value.value);

        facetHtml += `
          <li class="facet-value ${isSelected ? 'selected' : ''}">
            <label>
              <input type="checkbox" value="${value.value}" 
                     data-facet-id="${facetData.facetId}" 
                     ${isSelected ? 'checked' : ''}>
              ${value.value} (${value.numberOfResults})
            </label>
          </li>
        `;
      });

      facetEl.innerHTML = facetHtml;

      // Add event listeners to facet values
      facetEl.querySelectorAll('input[type="checkbox"]').forEach((checkbox) => {
        checkbox.addEventListener('change', function () {
          const facetId = this.getAttribute('data-facet-id');
          const facetValue = this.value;

          if (!selectedFacets[facetId]) {
            selectedFacets[facetId] = [];
          }

          if (this.checked) {
            selectedFacets[facetId].push({
              value: facetValue,
              state: 'selected',
            });
          } else {
            selectedFacets[facetId] = selectedFacets[facetId].filter((v) => v.value !== facetValue);
            if (selectedFacets[facetId].length === 0) {
              delete selectedFacets[facetId];
            }
          }

          currentPage = 1; // Reset to first page when facet changes
          performSearch();
        });
      });
    }

    // Initialize search functionality
    document.getElementById('search-button').addEventListener('click', function () {
      currentQuery = document.getElementById('search-box').value;
      currentPage = 1;
      performSearch();
    });

    document.getElementById('search-box').addEventListener('keypress', function (e) {
      if (e.key === 'Enter') {
        currentQuery = this.value;
        currentPage = 1;
        performSearch();
      }
    });

    // Initial search on page load
    performSearch();
  });
</script>

<style>
  /* Basic styling for the custom search interface */
  .search-section {
    margin-bottom: 30px;
  }

  .search-box-section {
    margin-bottom: 20px;
    display: flex;
  }

  #search-box {
    flex: 1;
    padding: 8px;
    font-size: 16px;
  }

  #search-button {
    padding: 8px 15px;
    background: #000;
    color: #fff;
    border: none;
    cursor: pointer;
  }

  .main-section {
    display: flex;
    gap: 20px;
  }

  .facet-column {
    width: 25%;
  }

  .facet {
    margin-bottom: 20px;
    border: 1px solid #eee;
    padding: 10px;
  }

  .facet h3 {
    margin-top: 0;
    margin-bottom: 10px;
  }

  .facet-value {
    list-style: none;
    margin: 5px 0;
  }

  .facet-value.selected {
    font-weight: bold;
  }

  .results-column {
    width: 75%;
  }

  #did-you-mean {
    margin-bottom: 10px;
    font-style: italic;
  }

  .results {
    list-style: none;
    padding: 0;
  }

  .result-item {
    margin-bottom: 20px;
    padding-bottom: 20px;
    border-bottom: 1px solid #eee;
  }

  .result-meta {
    font-size: 0.9em;
    color: #666;
  }

  .result-meta span {
    margin-right: 15px;
  }

  .pagination {
    margin-top: 20px;
    text-align: center;
  }

  .pagination a {
    display: inline-block;
    padding: 5px 10px;
    margin: 0 5px;
    text-decoration: none;
    border: 1px solid #ddd;
  }

  .pagination a.current {
    background: #000;
    color: #fff;
  }
</style>
